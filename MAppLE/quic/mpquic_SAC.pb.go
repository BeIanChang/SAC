// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.20.3
// source: mpquic_SAC.proto

package quic

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Define the PathInfo message
type PathInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathId               string  `protobuf:"bytes,1,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Active               bool    `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	RTT                  float64 `protobuf:"fixed64,3,opt,name=RTT,proto3" json:"RTT,omitempty"`
	HistoricalThroughput float64 `protobuf:"fixed64,4,opt,name=historical_throughput,json=historicalThroughput,proto3" json:"historical_throughput,omitempty"`
	PacketLoss           float64 `protobuf:"fixed64,5,opt,name=packet_loss,json=packetLoss,proto3" json:"packet_loss,omitempty"`
	Bandwidth            float64 `protobuf:"fixed64,6,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	Cwnd                 float64 `protobuf:"fixed64,7,opt,name=cwnd,proto3" json:"cwnd,omitempty"`
	Jitter               float64 `protobuf:"fixed64,8,opt,name=jitter,proto3" json:"jitter,omitempty"`
}

func (x *PathInfo) Reset() {
	*x = PathInfo{}
	mi := &file_mpquic_SAC_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PathInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathInfo) ProtoMessage() {}

func (x *PathInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mpquic_SAC_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathInfo.ProtoReflect.Descriptor instead.
func (*PathInfo) Descriptor() ([]byte, []int) {
	return file_mpquic_SAC_proto_rawDescGZIP(), []int{0}
}

func (x *PathInfo) GetPathId() string {
	if x != nil {
		return x.PathId
	}
	return ""
}

func (x *PathInfo) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *PathInfo) GetRTT() float64 {
	if x != nil {
		return x.RTT
	}
	return 0
}

func (x *PathInfo) GetHistoricalThroughput() float64 {
	if x != nil {
		return x.HistoricalThroughput
	}
	return 0
}

func (x *PathInfo) GetPacketLoss() float64 {
	if x != nil {
		return x.PacketLoss
	}
	return 0
}

func (x *PathInfo) GetBandwidth() float64 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *PathInfo) GetCwnd() float64 {
	if x != nil {
		return x.Cwnd
	}
	return 0
}

func (x *PathInfo) GetJitter() float64 {
	if x != nil {
		return x.Jitter
	}
	return 0
}

// Define the AggDelivState message
type AggDelivState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResolutionType int32       `protobuf:"varint,1,opt,name=resolution_type,json=resolutionType,proto3" json:"resolution_type,omitempty"`
	PathsInfo      []*PathInfo `protobuf:"bytes,2,rep,name=paths_info,json=pathsInfo,proto3" json:"paths_info,omitempty"`
	Bitrate        int32       `protobuf:"varint,3,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
}

func (x *AggDelivState) Reset() {
	*x = AggDelivState{}
	mi := &file_mpquic_SAC_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggDelivState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggDelivState) ProtoMessage() {}

func (x *AggDelivState) ProtoReflect() protoreflect.Message {
	mi := &file_mpquic_SAC_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggDelivState.ProtoReflect.Descriptor instead.
func (*AggDelivState) Descriptor() ([]byte, []int) {
	return file_mpquic_SAC_proto_rawDescGZIP(), []int{1}
}

func (x *AggDelivState) GetResolutionType() int32 {
	if x != nil {
		return x.ResolutionType
	}
	return 0
}

func (x *AggDelivState) GetPathsInfo() []*PathInfo {
	if x != nil {
		return x.PathsInfo
	}
	return nil
}

func (x *AggDelivState) GetBitrate() int32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathProbabilities []float64 `protobuf:"fixed64,1,rep,packed,name=path_probabilities,json=pathProbabilities,proto3" json:"path_probabilities,omitempty"` // Probabilities for each path
}

func (x *Policy) Reset() {
	*x = Policy{}
	mi := &file_mpquic_SAC_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_mpquic_SAC_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_mpquic_SAC_proto_rawDescGZIP(), []int{2}
}

func (x *Policy) GetPathProbabilities() []float64 {
	if x != nil {
		return x.PathProbabilities
	}
	return nil
}

var File_mpquic_SAC_proto protoreflect.FileDescriptor

var file_mpquic_SAC_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x70, 0x71, 0x75, 0x69, 0x63, 0x5f, 0x53, 0x41, 0x43, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x70, 0x71, 0x75, 0x69, 0x63, 0x5f, 0x53, 0x41, 0x43, 0x22, 0xed,
	0x01, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x74, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x52, 0x54, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x52, 0x54, 0x54, 0x12, 0x33,
	0x0a, 0x15, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x77, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x63, 0x77, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x22, 0x87,
	0x01, 0x0a, 0x0d, 0x41, 0x67, 0x67, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x70, 0x71, 0x75, 0x69, 0x63, 0x5f, 0x53, 0x41, 0x43, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x61, 0x74, 0x68, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x22, 0x37, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x11,
	0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x32, 0x4e, 0x0a, 0x0d, 0x4d, 0x50, 0x51, 0x55, 0x49, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x19, 0x2e, 0x6d, 0x70, 0x71, 0x75, 0x69, 0x63, 0x5f, 0x53, 0x41, 0x43, 0x2e, 0x41, 0x67,
	0x67, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x14, 0x2e, 0x6d, 0x70,
	0x71, 0x75, 0x69, 0x63, 0x5f, 0x53, 0x41, 0x43, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f, 0x6d, 0x70, 0x71, 0x75, 0x69, 0x63, 0x5f, 0x53, 0x41,
	0x43, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mpquic_SAC_proto_rawDescOnce sync.Once
	file_mpquic_SAC_proto_rawDescData = file_mpquic_SAC_proto_rawDesc
)

func file_mpquic_SAC_proto_rawDescGZIP() []byte {
	file_mpquic_SAC_proto_rawDescOnce.Do(func() {
		file_mpquic_SAC_proto_rawDescData = protoimpl.X.CompressGZIP(file_mpquic_SAC_proto_rawDescData)
	})
	return file_mpquic_SAC_proto_rawDescData
}

var file_mpquic_SAC_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_mpquic_SAC_proto_goTypes = []any{
	(*PathInfo)(nil),      // 0: mpquic_SAC.PathInfo
	(*AggDelivState)(nil), // 1: mpquic_SAC.AggDelivState
	(*Policy)(nil),        // 2: mpquic_SAC.Policy
}
var file_mpquic_SAC_proto_depIdxs = []int32{
	0, // 0: mpquic_SAC.AggDelivState.paths_info:type_name -> mpquic_SAC.PathInfo
	1, // 1: mpquic_SAC.MPQUICService.SelectPath:input_type -> mpquic_SAC.AggDelivState
	0, // 2: mpquic_SAC.MPQUICService.SelectPath:output_type -> mpquic_SAC.PathInfo
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_mpquic_SAC_proto_init() }
func file_mpquic_SAC_proto_init() {
	if File_mpquic_SAC_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mpquic_SAC_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mpquic_SAC_proto_goTypes,
		DependencyIndexes: file_mpquic_SAC_proto_depIdxs,
		MessageInfos:      file_mpquic_SAC_proto_msgTypes,
	}.Build()
	File_mpquic_SAC_proto = out.File
	file_mpquic_SAC_proto_rawDesc = nil
	file_mpquic_SAC_proto_goTypes = nil
	file_mpquic_SAC_proto_depIdxs = nil
}
